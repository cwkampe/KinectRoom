GOALS

	The goal of this project is to create software that will enable 
	non-programmers (e.g. exhibit designers and performance artists) 
	to define interactive spaces, in which the movements of participants 
	trigger multi-media events.  

BASIC DECISIONS

    The most obvious sensor would seem to be the MicroSoft Kinect:
	it is readily available
	its USB interface can be connected to any machine and OS
	it is fairly well supported by open source s/w (OpenNI)

    The most obvious language would seem to be Java:
	it is a relatively high level language (e.g. vs C/C++)
	it is OS and hardware independent
	it has good integrated development environments (e.g. Eclipse)
	the OpenNI libraries have Java bindings

IMPORTING THIS PROJECT INTO Eclipse

    1. You want to have the "git" plugin installed:

	http://www.vogella.com/articles/EGit/article.html

    2. for Processing, you need to install SimpleOpenNI on your system
       (This is not needed for the newer KinectedSpace)

	https://code.google.com/p/simple-openni/wiki/Installation
	(except for copying SimpleOpenNI.zip into ~/sketchbook)

    3. Clone a local copy and import the project into Eclipse

	eclipse:
		FILE->import->Git->Projects from Git
		Linux URI: git@github.com:/cwkampe/KinectRoom.git
	        Windows URI: https://github.com/cwkampe/KinectRoom

  	    note:
		If this is a new workspace, you will probably want
		to Window->Customize Workspace/Show View because we
		are bypassing the Java Project Wizard that normally
		sets this stuff up for you.

    4. Install OpenNI on your system:

    	Linux:
		OpenNI		v1.5.7.10
		SensorKinect	v5.1.2.1
		I cloned the repos, built, and ran the install scripts
		The instructions were imperfect, but it came up pretty quickly
	
	Windows:
		I found installation instructions at
			fivedots.coe.psu.ac.th/~ad/kinect/installation.html
		It recommends using the installer at code.google.com, which includes
		  OpenNI	1.5.4.0 (akwardly, much out of date)
		  SensorKinect	5.1.2.1
		
		Download the installer and then, in this order, install
			openni
			sensor-win32
			sensorkinect
			nite

    5. Import OpenNI into the new project

	FILE->Import->File System
		browse to directory containing OpenNI jar 
			Linux default: /usr/share/java
			Windows default: C:\Program Files\OpenNI\Bin
		import OpenNI.jar into the project (e.g. into Release subdirectory)
		note that the old version is camelCase, the new version snakecase

	in package explorer, select org.OpenNI.jar
		right click Build Path->Add to Buildpath
		right click Build Path->Configure Build Path
			open org.openNI.jar 
			select native library location
			Edit
			browse to directory containing OpenNI.jni.dll (Linux: libOpenNI.jni.so)


    OBSOLETE INSTRUCTIONS FOR SimpleOpenNI

    6. Complete the importation of SimpleOpenNI into the new project

	Hopefully, all you have to do is copy the (appropriate) native 
	SimpleOpenNI library from SimpleOpenNI/library into the Java-0.2/bin
	directory.

        This repo already contains:
	    Processing core.jar
	    SimpleOpenNI.jar
	    a .classpath that 
		includes those two jars
		a redirection to Java-0.2/bin for native libraries

	otherwise you would need to import these into the project:
		http://processing.org/tutorials/eclipse
		https://code.google.com/p/simple-openni/wiki/IDE

	CAVEAT:
		I have tested the processing part of this bundling,
		but not yet having my own kinect, I have not yet
		tested that the bundled SimpleOpenNI.jar works and
		properly binds to the native library.


    5. Create run configurations for the new project

	select RuleBuilder.java, right menu click "run as", 
		select "Java Application"

	selct ProcessingKinnect.java, right menu click "run as", 
		select "Java Applet"

	you will probably also want to update those Run Configurations
	to set up default parameters.  I, for example, use:
	
		RuleBuilder (Application): 
			--debug=1 --regions=bin/Regions.xml

		ProcessingKinect (Applet):
			test = 3
			debug = 2


	NOTE:
		In the normal (non-test) mode, ProcessingKinect will not
		properly initialize if it cannot open a Kinect

HISTORY

    0.1	proof of concept

	Written under "Processing", hard coded to recognize specific
	locations and trigger specific events.  It was set up at a
	conference and proved sufficiently compelling to justify 
	further work.

    0.2 first cut at separating the exhibit from the code

	Accepts region and rule descriptions in XML files (which
	can be created by helper applications), eliminating the
	need for the exhibit designers to interact with the code.

